{
	"info": {
		"_postman_id": "9200357b-c97d-4295-a711-a2108b7249d9",
		"name": "UžduotisTestai DummyJson",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41095196"
	},
	"item": [
		{
			"name": "Dynamic image",
			"item": [
				{
					"name": "Generate square image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// dėstytojas dar rašė šitą testą:\r",
									"// bet neatsimenu kuom jis geresnis ar blogesnis už tą, kurį man davė scripts (viršuje)\r",
									"// pm.test(\"Response time is less that 200ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).\r",
									"//     to.be.below(300);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}image/150",
							"host": [
								"{{base_url}}image"
							],
							"path": [
								"150"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate custom size image",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}image/200x100",
							"host": [
								"{{base_url}}image"
							],
							"path": [
								"200x100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate image with custom text",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}image/400x200/008080/ffffff?text=Hello+Peter",
							"host": [
								"{{base_url}}image"
							],
							"path": [
								"400x200",
								"008080",
								"ffffff"
							],
							"query": [
								{
									"key": "text",
									"value": "Hello+Peter"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate image with custom colors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}image/400x200/282828",
							"host": [
								"{{base_url}}image"
							],
							"path": [
								"400x200",
								"282828"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate image with different formats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}image/400x200?type=webp&text=I+am+a+webp+image",
							"host": [
								"{{base_url}}image"
							],
							"path": [
								"400x200"
							],
							"query": [
								{
									"key": "type",
									"value": "webp"
								},
								{
									"key": "text",
									"value": "I+am+a+webp+image"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate image with custom font family",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}image/400x200/282828?fontFamily=pacifico&text=I+am+a+pacifico+font",
							"host": [
								"{{base_url}}image"
							],
							"path": [
								"400x200",
								"282828"
							],
							"query": [
								{
									"key": "fontFamily",
									"value": "pacifico"
								},
								{
									"key": "text",
									"value": "I+am+a+pacifico+font"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate image with custom font size",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}image/400x200/008080/ffffff?text=Hello+Peter!&fontSize=16",
							"host": [
								"{{base_url}}image"
							],
							"path": [
								"400x200",
								"008080",
								"ffffff"
							],
							"query": [
								{
									"key": "text",
									"value": "Hello+Peter!"
								},
								{
									"key": "fontSize",
									"value": "16"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate identicon",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}icon/abc123/150",
							"host": [
								"{{base_url}}icon"
							],
							"path": [
								"abc123",
								"150"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login user and get tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"AccessToken\", response.accessToken);\r",
									"pm.environment.set(\"RefreshToken\", response.refreshToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"emilys\",\r\n    \"password\": \"emilyspass\",\r\n    \"expiresInMins\": 30, // optional, defaults to 60\r\n    \r\n    \"credentials\": \"include\" // Include cookies (e.g., accessToken) in the request\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/login",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current auth user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/me",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh auth session",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{RefreshToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJlbWlseXMiLCJlbWFpbCI6ImVtaWx5LmpvaG5zb25AeC5kdW1teWpzb24uY29tIiwiZmlyc3ROYW1lIjoiRW1pbHkiLCJsYXN0TmFtZSI6IkpvaG5zb24iLCJnZW5kZXIiOiJmZW1hbGUiLCJpbWFnZSI6Imh0dHBzOi8vZHVtbXlqc29uLmNvbS9pY29uL2VtaWx5cy8xMjgiLCJpYXQiOjE3MzgwODkzMjEsImV4cCI6MTc0MDY4MTMyMX0.7RoT5QijBD_Nj0CLGM8DCMCM2l9DRC6wts7NhMGuhSg\", // Optional, if not provided, the server will use the cookie\r\n    \"expiresInMins\": 30 // optional (FOR ACCESS TOKEN), defaults to 60 \r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/refresh",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get all products",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products",
							"host": [
								"{{base_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/1",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/search?q=phone",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "phone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products?limit=10&skip=2&select=title,price",
							"host": [
								"{{base_url}}products"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "2"
								},
								{
									"key": "select",
									"value": "title,price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products?sortBy=title&order=asc",
							"host": [
								"{{base_url}}products"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "title"
								},
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/categories",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products category list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/category-list",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"category-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products by a category",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/category/smartphones",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"category",
								"smartphones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"title\": \"BMW Pencil\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/add",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"iPhone Galaxy +1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/1",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/1",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Carts",
			"item": [
				{
					"name": "Get all carts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}carts",
							"host": [
								"{{base_url}}carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single cart",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}carts/1",
							"host": [
								"{{base_url}}carts"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get carts by a user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}carts/user/50",
							"host": [
								"{{base_url}}carts"
							],
							"path": [
								"user",
								"50"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new cart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"userId\": 1,\r\n    \"products\": \r\n      [\r\n        {\r\n        \"id\": 144,\r\n        \"quantity\": 4\r\n        },\r\n        {\r\n        \"id\": 98,\r\n        \"quantity\": 1\r\n        }\r\n      ]\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}carts/add",
							"host": [
								"{{base_url}}carts"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a cart",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"merge\": \"true\", // this will include existing products in the cart\r\n    \"products\": [\r\n      {\r\n        \"id\": 1,\r\n        \"quantity\": 1\r\n      }\r\n    ]\r\n  }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}carts/1",
							"host": [
								"{{base_url}}carts"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}carts/1",
							"host": [
								"{{base_url}}carts"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Recipes",
			"item": [
				{
					"name": "Get all recipes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes",
							"host": [
								"{{base_url}}recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single recipe",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes/18",
							"host": [
								"{{base_url}}recipes"
							],
							"path": [
								"18"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search recipes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes/search?q=Margherita",
							"host": [
								"{{base_url}}recipes"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Margherita"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip recipes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes?limit=10&skip=10&select=name,image",
							"host": [
								"{{base_url}}recipes"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "10"
								},
								{
									"key": "select",
									"value": "name,image"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort recipes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes?sortBy=name&order=asc",
							"host": [
								"{{base_url}}recipes"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all recipes tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes/tags",
							"host": [
								"{{base_url}}recipes"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get recipes by a tag",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes/tag/Pakistani",
							"host": [
								"{{base_url}}recipes"
							],
							"path": [
								"tag",
								"Pakistani"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get recipes by a meal",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}recipes/meal-type/snack",
							"host": [
								"{{base_url}}recipes"
							],
							"path": [
								"meal-type",
								"snack"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get all users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users",
							"host": [
								"{{base_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user and get tokens",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"emilys\",\r\n    \"password\": \"emilyspass\",\r\n    \"expiresInMins\": 30 // optional, defaults to 60\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}user/login",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current authenticated user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJlbWlseXMiLCJlbWFpbCI6ImVtaWx5LmpvaG5zb25AeC5kdW1teWpzb24uY29tIiwiZmlyc3ROYW1lIjoiRW1pbHkiLCJsYXN0TmFtZSI6IkpvaG5zb24iLCJnZW5kZXIiOiJmZW1hbGUiLCJpbWFnZSI6Imh0dHBzOi8vZHVtbXlqc29uLmNvbS9pY29uL2VtaWx5cy8xMjgiLCJpYXQiOjE3MzgwNzQyMTAsImV4cCI6MTczODA3NjAxMH0.1HCb3XZYuOB-oOVs5ngHT4ggx6ThFzC18_l84oNfzUA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}user/me",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users/1",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users/search?q=John",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "John"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users/filter?key=hair.color&value=Brown",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"filter"
							],
							"query": [
								{
									"key": "key",
									"value": "hair.color"
								},
								{
									"key": "value",
									"value": "Brown"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users?limit=5&skip=10&select=firstName,age",
							"host": [
								"{{base_url}}users"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "skip",
									"value": "10"
								},
								{
									"key": "select",
									"value": "firstName,age"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users?sortBy=firstName&order=asc",
							"host": [
								"{{base_url}}users"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "firstName"
								},
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's carts by user id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users/6/carts",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"6",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's posts by user id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users/5/posts",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"5",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's todos by user id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}users/8/todos",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"8",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"firstName\": \"Muhammad\",\r\n    \"lastName\": \"Ovi\",\r\n    \"age\": 250\r\n  }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}users/add",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/* updating lastName of user with id 2 */\r\n//   method: 'PUT', /* or PATCH */\r\n  {\r\n    \"lastName\": \"Owais\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}users/2",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}users/1",
							"host": [
								"{{base_url}}users"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Get all posts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts",
							"host": [
								"{{base_url}}posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Title</th>\r",
									"        <th>Body</th>\r",
									"        <th>Tags</th>\r",
									"        <th>Likes</th>\r",
									"        <th>Dislikes</th>\r",
									"        <th>Views</th>\r",
									"        <th>User ID</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.id}}</td>\r",
									"        <td>{{response.title}}</td>\r",
									"        <td>{{response.body}}</td>\r",
									"        <td>{{response.tags.join(\", \")}}</td>\r",
									"        <td>{{response.reactions.likes}}</td>\r",
									"        <td>{{response.reactions.dislikes}}</td>\r",
									"        <td>{{response.views}}</td>\r",
									"        <td>{{response.userId}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/251",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"251"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search posts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/search?q=sea",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "sea"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip posts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts?limit=22&skip=1&select=title,reactions,userId",
							"host": [
								"{{base_url}}posts"
							],
							"query": [
								{
									"key": "limit",
									"value": "22"
								},
								{
									"key": "skip",
									"value": "1"
								},
								{
									"key": "select",
									"value": "title,reactions,userId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort posts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts?sortBy=a-z&order=asc",
							"host": [
								"{{base_url}}posts"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "a-z"
								},
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all posts tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/tags",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts tag list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/tag-list",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"tag-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts by a tag",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/tag/life",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"tag",
								"life"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all posts by user id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/user/203",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"user",
								"203"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get post's comments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/4/comments",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"4",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new post",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"title\": \"I am in love with someone.\",\r\n    \"userId\": 5\r\n    /* other post data */\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}posts/add",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a post",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"I think I should shift to the moon\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}posts/1",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a post",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}posts/9",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"9"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Get all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Patikrinama, kiek komentarų turi post ID 46\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    // Filtruojame tik tuos komentarus, kurių postId yra 46\r",
									"    let commentsForPost46 = jsonData.comments.filter(comment => comment.postId === 46);\r",
									"\r",
									"    // Tikėtinas komentarų skaičius\r",
									"    let expectedCount = commentsForPost46.length;\r",
									"\r",
									"    // Patikriname, ar yra bent vienas komentaras\r",
									"    pm.expect(expectedCount).to.be.above(0);\r",
									"\r",
									"    // Išvedame į konsolę komentarų informaciją\r",
									"    console.log(\"Komentarai, kurių postId yra 46:\", commentsForPost46);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}comments?limit=0",
							"host": [
								"{{base_url}}comments"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single comment",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}comments/18",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"18"
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip comments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}comments?limit=10&skip=10&select=body,postId",
							"host": [
								"{{base_url}}comments"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "10"
								},
								{
									"key": "select",
									"value": "body,postId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments by post id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}comments/post/9",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"post",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new comment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This makes all sense to me!\",\r\n    \"postId\": 3,\r\n    \"userId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}comments/add",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a comment",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"I think I should shift to the moon\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}comments/17",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"17"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a comment",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}comments/81",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"81"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"pm.test(\"Patikrinama, kiek komentarų turi post ID 46\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    // Filtruojame tik tuos komentarus, kurių postId yra 46\r",
							"    let commentsForPost46 = jsonData.comments.filter(comment => comment.postId === 46);\r",
							"\r",
							"    // Tikėtinas komentarų skaičius\r",
							"    let expectedCount = commentsForPost46.length;\r",
							"\r",
							"    // Patikriname, ar yra bent vienas komentaras\r",
							"    pm.expect(expectedCount).to.be.above(0);\r",
							"\r",
							"    // Išvedame į konsolę komentarų informaciją\r",
							"    console.log(\"Komentarai, kurių postId yra 46:\", commentsForPost46);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Todos",
			"item": [
				{
					"name": "Get all todos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}todos",
							"host": [
								"{{base_url}}todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single todo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}todos/19",
							"host": [
								"{{base_url}}todos"
							],
							"path": [
								"19"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a random todo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}todos/random",
							"host": [
								"{{base_url}}todos"
							],
							"path": [
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip todos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}todos?limit=3&skip=91",
							"host": [
								"{{base_url}}todos"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "skip",
									"value": "91"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all todos by user id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}todos/user/7",
							"host": [
								"{{base_url}}todos"
							],
							"path": [
								"user",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new todo",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"todo\": \"Use DummyJSON in the project\",\r\n    \"completed\": \"false\",\r\n    \"userId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}todos/add",
							"host": [
								"{{base_url}}todos"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a todo",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"completed\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}todos/1",
							"host": [
								"{{base_url}}todos"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a todo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}todos/14",
							"host": [
								"{{base_url}}todos"
							],
							"path": [
								"14"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Quotes",
			"item": [
				{
					"name": "Get all quotes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}quotes",
							"host": [
								"{{base_url}}quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single quote",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}quotes/11",
							"host": [
								"{{base_url}}quotes"
							],
							"path": [
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a random quote",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}quotes/random",
							"host": [
								"{{base_url}}quotes"
							],
							"path": [
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip quotes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}quotes?limit=3&skip=85",
							"host": [
								"{{base_url}}quotes"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "skip",
									"value": "85"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//       3.1 Patikrinti kiekvieno request status kodą\r",
					"pm.test(\"Status code is 200\", function () {\r",
					"    pm.response.to.have.status(200);\r",
					"});\r",
					"\r",
					"//       3.2 Patikrinti kiekvieno request formatą\r",
					"pm.test(\"Content-Type is one of json, webp, jpg, or png\", function () {\r",
					"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
					"      .to.match(/(json|webp|jpg|png)/);\r",
					"});\r",
					"\r",
					"//       3.3 Patikrinti, ar kiekvienas response JSON neturi 'error elemento'\r",
					"pm.test(\"Nėra klaidų kiekviename elemente\", function () {\r",
					"    const responseJson = pm.response.json();  // Paverčiame atsakymą į JSON\r",
					"    responseJson.forEach(function(item) {\r",
					"        pm.expect(item).to.not.have.property('error');  // Tikriname kiekvieną elementą, ar neturi 'error' elemento\r",
					"    });\r",
					"});\r",
					"\r",
					"// 4. Parašyti testą 'https://dummyjson.com/comments' request'ui, kuris patikrina, kiek komentarų turi Post, kurio id=46\r",
					"pm.test(\"Patikrinama, kiek komentarų turi post ID 46\", function () {\r",
					"    let jsonData = pm.response.json();\r",
					"    \r",
					"    // Filtruojame tik tuos komentarus, kurių postId yra 46\r",
					"    let commentsForPost46 = jsonData.comments.filter(comment => comment.postId === 46);\r",
					"\r",
					"    // Tikėtinas komentarų skaičius\r",
					"    let expectedCount = commentsForPost46.length;\r",
					"\r",
					"    // Patikriname, ar yra bent vienas komentaras\r",
					"    pm.expect(expectedCount).to.be.above(0);\r",
					"\r",
					"    // Išvedame į konsolę komentarų informaciją\r",
					"    console.log(\"Komentarai, kurių postId yra 46:\", commentsForPost46);\r",
					"});\r",
					""
				]
			}
		}
	]
}